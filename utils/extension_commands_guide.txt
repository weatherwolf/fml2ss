# FML to SceneScript Meta Data Collection Guide

## Overview
This document explains the meta data collection system used in the FML to SceneScript converter. Meta data preserves FML information in separate JSON files for round-trip conversion fidelity.

## Core Meta Data Collection

### 1. Material Meta Data - Wall Materials and Decorations
Collects wall material information (colors, textures, assets) in meta.json.

**Format:**
```typescript
// Returns MetaDataResult with metaData and warnings
createMaterialMetaData(wallId, side, type, value, additionalParams?)
```

**Examples:**
```typescript
// Color material
const result = createMaterialMetaData(0, 'left', 'color', '#FFFFFF')
// Result: { metaData: { type: 'color', value: '#FFFFFF' }, warnings: [] }

// Asset material
const result = createMaterialMetaData(1, 'right', 'asset', 'mat_wood_oak')
// Result: { metaData: { type: 'asset', value: 'mat_wood_oak' }, warnings: [] }

// Texture material with additional parameters
const result = createMaterialMetaData(2, 'left', 'texture', 'wallpaper.jpg', {
  src: 'wallpaper.jpg',
  fit: 'fill',
  tlx: 0, tly: 0, brx: 100, bry: 100
})
// Result: { 
//   metaData: { 
//     type: 'texture', 
//     value: 'wallpaper.jpg',
//     src: 'wallpaper.jpg',
//     fit: 'fill',
//     tlx: 0, tly: 0, brx: 100, bry: 100
//   }, 
//   warnings: [] 
// }
```

### 2. Swing Meta Data - Door Swing Direction
Collects door swing direction and style information in meta.json.

**Format:**
```typescript
// Returns MetaDataResult with metaData and warnings
createSwingMetaData(doorId, style, inward, maxOpenDeg?)
```

**Examples:**
```typescript
// Basic swing
const result = createSwingMetaData(1000, 'left', true)
// Result: { metaData: { style: 'left', inward: true }, warnings: [] }

// Swing with max open angle
const result = createSwingMetaData(1001, 'right', false, 90)
// Result: { metaData: { style: 'right', inward: false, maxOpenDeg: 90 }, warnings: [] }
```

### 3. Asset Meta Data - Asset References
Collects asset references for doors, windows, and items in meta.json.

**Format:**
```typescript
// Returns MetaDataResult with metaData and warnings
createAssetMetaData(elementId, assetRef, elementType)
```

**Examples:**
```typescript
// Door asset
const result = createAssetMetaData(1000, 'door_main_123', 'door')
// Result: { metaData: { asset: 'door_main_123' }, warnings: [] }

// Window asset
const result = createAssetMetaData(2000, 'window_sliding_456', 'window')
// Result: { metaData: { asset: 'window_sliding_456' }, warnings: [] }

// Item asset
const result = createAssetMetaData(3000, 'furniture_sofa_789', 'item')
// Result: { metaData: { asset: 'furniture_sofa_789' }, warnings: [] }
```

## Validation System

### ID Validation
All meta data functions validate element IDs to ensure they're in correct ranges:

```typescript
validateWallId(5)      // true (>= 0)
validateDoorId(1005)   // true (1000-1999)
validateWindowId(2005) // true (2000-2999)
validateItemId(3005)   // true (3000-3999)
```

### Parameter Validation
Each function validates its specific parameters and returns warnings:

```typescript
// Material validation
const result1 = createMaterialMetaData(-1, 'left', 'color', '#FFFFFF')
// result1.warnings: ["Invalid wall ID: -1. Must be >= 0"]

const result2 = createMaterialMetaData(0, 'invalid', 'color', '#FFFFFF')
// result2.warnings: ["Invalid side: invalid. Must be 'left' or 'right'"]

const result3 = createMaterialMetaData(0, 'left', 'invalid', '#FFFFFF')
// result3.warnings: ["Invalid material type: invalid. Must be 'color', 'asset', or 'texture'"]

const result4 = createMaterialMetaData(0, 'left', 'color', '')
// result4.warnings: ["Invalid material value: . Cannot be empty"]

// Swing validation
const result5 = createSwingMetaData(999, 'left', true)
// result5.warnings: ["Invalid door ID: 999. Must be 1000-1999"]
```

## Error Handling

### Graceful Degradation
When validation fails, the system:
1. **Logs warnings** instead of crashing
2. **Returns null metaData** for invalid inputs
3. **Continues processing** other elements

```typescript
const result = createMaterialMetaData(-1, 'left', 'color', '#FFFFFF');
if (result.warnings.length > 0) {
  console.warn('Material meta data warnings:', result.warnings);
}
if (result.metaData) {
  metaDataCollector.addMetaData(wallId.toString(), 'wall', result.metaData);
} else {
  // Meta data was invalid, skip it
}
```

### Warning Collection
All converters collect warnings for transparency:

```typescript
// In wall converter
if (result.warnings.length > 0) {
  this.warningCollector.addValidationError('wall', 'material', wallId, null, result.warnings.join(', '));
}
```

## Integration with Meta Data Collector

All meta data functions work with the `MetaDataCollector` to store information:

```typescript
// Example usage in converters
const result = createMaterialMetaData(wallId, 'left', 'color', '#FFFFFF')
if (result.metaData) {
  metaDataCollector.addMetaData(wallId.toString(), 'wall', result.metaData)
}
```

## Usage in Converters

### Wall Converter
```typescript
// Convert wall decorations
const result = createMaterialMetaData(wallId, side, 'color', colorValue);
if (result.metaData) {
  const wallMetaData = metaDataCollector.getElementMetaData(wallId.toString()) || {};
  if (!wallMetaData.decorations) {
    wallMetaData.decorations = {};
  }
  wallMetaData.decorations[side] = result.metaData;
  metaDataCollector.addMetaData(wallId.toString(), 'wall', wallMetaData);
}
```

### Opening Converter
```typescript
// Convert door swing
const swingResult = createSwingMetaData(doorId, style, inward);
if (swingResult.metaData) {
  metaDataCollector.addMetaData(doorId.toString(), 'door', swingResult.metaData);
}

// Convert asset references
const assetResult = createAssetMetaData(doorId, door.refid, 'door');
if (assetResult.metaData) {
  metaDataCollector.addMetaData(doorId.toString(), 'door', assetResult.metaData);
}
```

### Item Converter
```typescript
// Convert item assets
const assetResult = createAssetMetaData(itemId, item.refid, 'item');
if (assetResult.metaData) {
  metaDataCollector.addMetaData(itemId.toString(), 'item', assetResult.metaData);
}
```

## Comment Commands

### Unsupported Properties
For FML properties not directly supported by SceneScript:

```typescript
// Create comment for unsupported property
createCommentCommand('door', 1000, 'frameColor', '#FF0000')
// Output: # door 1000 frameColor: "#FF0000"

createCommentCommand('item', 3000, 'mirrored', [1, 0])
// Output: # item 3000 mirrored: [1,0]
```

## Best Practices

### 1. Always Validate Inputs
```typescript
// Good: Validate before creating command
if (validateWallId(wallId) && validateAssetRef(assetRef)) {
  const result = createSetMaterialCommand(wallId, side, 'asset', assetRef);
}

// Bad: Assume inputs are valid
const result = createSetMaterialCommand(wallId, side, 'asset', assetRef);
```

### 2. Handle Warnings Properly
```typescript
// Good: Collect and report warnings
const result = createSetMaterialCommand(wallId, side, type, value);
if (result.warnings.length > 0) {
  this.warnings.push(...result.warnings);
}
if (result.command) {
  lines.push(result.command);
}
```

### 3. Use Type-Safe Parameters
```typescript
// Good: Use proper types
createSetSwingCommand(doorId, 'left', true)

// Bad: Use any types
createSetSwingCommand(doorId, 'invalid', 'yes')
```

### 4. Preserve Unsupported Data
```typescript
// Good: Use comment commands for unsupported properties
if (item.mirrored) {
  lines.push(createCommentCommand('item', itemId, 'mirrored', item.mirrored));
}
```

## Complete Example

### Input FML
```json
{
  "walls": [
    {
      "decor": {
        "left": {"color": "#FFFFFF"},
        "right": {"refid": "mat_brick_red"}
      }
    }
  ],
  "openings": [
    {
      "type": "door",
      "refid": "door_main_123",
      "mirrored": [0, 0]
    }
  ]
}
```

### Generated SceneScript
```
make_wall, id=0, a_x=0.000000, a_y=0.000000, ...
set_material, wall_id=0, side=left, type=color, value=#FFFFFF
set_material, wall_id=0, side=right, type=asset, value=mat_brick_red
make_door, id=1000, wall0_id=0, wall1_id=-1, ...
set_swing, id=1000, style=left, inward=true
set_asset, id=1000, refid=door_main_123
# door 1000 mirrored: [0,0]
```

## Key Features

1. **Validation**: All parameters validated before command creation
2. **Error Handling**: Graceful degradation with warning collection
3. **Type Safety**: TypeScript interfaces ensure correct parameter types
4. **Consistency**: Standardized format across all commands
5. **Extensibility**: Easy to add new command types
6. **Documentation**: Clear examples and usage patterns

This extension command system ensures reliable preservation of FML metadata in SceneScript format, maintaining round-trip conversion fidelity while providing robust error handling and validation. 